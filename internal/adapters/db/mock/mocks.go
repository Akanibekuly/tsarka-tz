// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entities "github.com/Akanibekuly/tsarka-tz/internal/domain/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockHash is a mock of Hash interface.
type MockHash struct {
	ctrl     *gomock.Controller
	recorder *MockHashMockRecorder
}

// MockHashMockRecorder is the mock recorder for MockHash.
type MockHashMockRecorder struct {
	mock *MockHash
}

// NewMockHash creates a new mock instance.
func NewMockHash(ctrl *gomock.Controller) *MockHash {
	mock := &MockHash{ctrl: ctrl}
	mock.recorder = &MockHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHash) EXPECT() *MockHashMockRecorder {
	return m.recorder
}

// HashCreate mocks base method.
func (m *MockHash) HashCreate(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashCreate", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HashCreate indicates an expected call of HashCreate.
func (mr *MockHashMockRecorder) HashCreate(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashCreate", reflect.TypeOf((*MockHash)(nil).HashCreate), id)
}

// HashGet mocks base method.
func (m *MockHash) HashGet(id string) (*entities.HashSt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashGet", id)
	ret0, _ := ret[0].(*entities.HashSt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashGet indicates an expected call of HashGet.
func (mr *MockHashMockRecorder) HashGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashGet", reflect.TypeOf((*MockHash)(nil).HashGet), id)
}

// HashUpdate mocks base method.
func (m *MockHash) HashUpdate(id string, hash *entities.HashSt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashUpdate", id, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// HashUpdate indicates an expected call of HashUpdate.
func (mr *MockHashMockRecorder) HashUpdate(id, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashUpdate", reflect.TypeOf((*MockHash)(nil).HashUpdate), id, hash)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// UserCreate mocks base method.
func (m *MockUser) UserCreate(user *entities.UserSt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockUserMockRecorder) UserCreate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockUser)(nil).UserCreate), user)
}

// UserDelete mocks base method.
func (m *MockUser) UserDelete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockUserMockRecorder) UserDelete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockUser)(nil).UserDelete), id)
}

// UserGet mocks base method.
func (m *MockUser) UserGet(id int) (*entities.UserSt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", id)
	ret0, _ := ret[0].(*entities.UserSt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockUserMockRecorder) UserGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockUser)(nil).UserGet), id)
}

// UserUpdate mocks base method.
func (m *MockUser) UserUpdate(id int, user *entities.UserUpdateSt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockUserMockRecorder) UserUpdate(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockUser)(nil).UserUpdate), id, user)
}
